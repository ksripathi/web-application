#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from op_exceptions import NotAuthorizedError
from op_exceptions import ConstraintError
from utils import *
#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired
from op_exceptions import NotAuthorizedError
from op_exceptions import ConstraintError

#+END_SRC


** Imports for utility functions

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

import re


#+END_SRC


** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model*
* Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

class NotAuthorizedError(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
        
class ConstraintError(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC





** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
        
    def to_client(self):
        return self.value

#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value):
            self.value = value
        else:
            raise TypeError('%s is not a valid Email!' %value)
            
    def __str__(self):
        return self.value
        
    def to_client(self):
        return self.value
        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("John@gmail.com")
        # correct email
        self.assertEqual(new_email.value, "John@gmail.com")
        # incorrect email
        self.assertRaises(TypeError,Email,"John")
#+END_SRC

** User

*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User():
    users = []     # this is a static variable, accessed by User.users
    name = None
    email = None
    role = None
    session = None
#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self,name,email,role = 'admin'):
        if User.users == []:
            self.set_email(email)
            self.set_name(name)
            self.set_role(Role(role))
            User.users.append(self)
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True

    def test_user_creation(self):
        print "test_user_creation"
        new_user = User(email = Email("John@gmail.com"),name = Name("John"),role = Role("admin"))
        # correct email
        self.assertEqual(new_user.email.value, "John@gmail.com")
        self.assertEqual(new_user.name.value, "John")
        self.assertEqual(new_user.role.value, "admin")
        # incorrect email
        self.assertRaises(TypeError,User, email = Email("John.com"),name = Name("John"),role = Role("admin"))
 #+END_SRC


*** Functions

**** setEmail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        if isinstance(email,Email):
            self.email = email
        else:
            raise TypeError('Invalid object type for email')
#+END_SRC

***** Test

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if isinstance(name,Name):
            self.name = name
        else:
            raise TypeError('Invalid object type for name')
#+END_SRC
***** Test

**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        if isinstance(role,Role):
            self.role = role
        else:
            raise TypeError('Invalid object type for role')

#+END_SRC
***** Test

**** setSession
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_session(self,sess):
        self.session = sess

#+END_SRC
***** Test

**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.role
#+END_SRC
***** Test


**** getEmail
 #+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC


**** getName
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

**** getSession
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_session(self):
        return self.session
#+END_SRC



**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
        return User.users
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"

#+END_SRC


**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return {
            'name': self.name.to_client(),
            'email': self.email.to_client(),
            'role': self.role.to_client()
        }
#+END_SRC

**** login
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def login(user):
        if isinstance(user,User) and user in User.users:
            if user.session == None:
                sess = Session (user)
                user.set_session(sess)
                return sess 
            else:
                raise ConstraintError("User already in session")
        else:
            raise TypeError('Invalid user')
#+END_SRC

**** logout
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def logout(self):
        if self.session != None:
            self.set_session(None)
            del(self.session)
        else:
            raise ConstraintError('User not loged in')
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role():
    
    value = None
    roles = ['admin','user']
    
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, value):
        self.set_role(value)
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role_creation"
#+END_SRC


*** Functions

**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, name):
        if name not in Role.roles:
            raise TypeError("Invalid role type")
        else:
            self.value = name
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
#+END_SRC


**** getRole

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.value
#+END_SRC


**** getAllRoles: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all_roles():
        return Role.roles

#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return self.value
#+END_SRC

** Session

*** Introduction
   A session is the class that performs all the operations on the system.

   - User :: A User object is associated with each session object.


*** Mutable Data

     These are the data associated with Session type, which are mutable



*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Session():
    
    usr = None
    
#+END_SRC


*** Constructor

    The signature of Session is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(user)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self,user):
        self.usr = user
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role_creation"
#+END_SRC


*** Functions

**** create_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def create_user(self,name,email,role):
        if self.usr.role.value == 'admin':
            for user in User.users:
                if user.email == email:
                    raise ConstraintError('User alredy exists!')
            newUser = User(name,email)
            newUser.set_name(name)
            newUser.set_email(email)
            newUser.set_role(role)
            User.users.append(newUser)
        else:
            raise NotAuthorizedError('Only an admin can create a new user')
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
#+END_SRC


**** delete_user

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def delete_user(self,user):
        if self.usr.role.value == 'admin':
            if isinstance (user,User) and user in User.users:
                if user.session == None:
                    User.users.remove(user)
                    del(user)
                else:
                    raise NotAuthorizedError('user in session')
            else:
                raise TypeError('Invalid user')
        else:
            raise NotAuthorizedError('You do not have he permission to delete users' )
#+END_SRC


**** update_role

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def update_role(self,user):
        if self.usr.role.value == 'admin':
            if isinstance (user,User) and user in User.users:
                if user.role.value == 'user' :
                    user.set_role(Role('admin'))
                elif user.role.value == 'admin' and user == self.usr and self.usr.admin_check() == True:
                    user.set_role(Role('user'))
                else:
                    raise  NotAuthorizedError('Operation not authorized')

#+END_SRC


***** Test update_role
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
 #+END_SRC


**** update_name
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def update_name(self,user,name):
            if self.usr.role.value == 'admin' :
                if isinstance (user,User) and user in User.users :
                    user.set_name(name)
                else:
                    raise TypeError('Invalid User type')
            
            elif self.usr.role.value == 'user' :
                if isinstance (user,User) and user in User.users and user == self.usr:
                    user.set_name(name)
                else:
                    raise TypeError('Invalid User type')
            else:
                raise TypeError('Invalid role type')
#+END_SRC

**** update_email
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def update_email(self,user,email):
            if self.usr.role.value == 'admin' :
                if isinstance (email,Email) and user in User.users :
                    user.set_email(email)
                else:
                    raise TypeError('Invalid User type')
            
            elif self.usr.role.value == 'user' :
                if isinstance (email,Email) and user in User.users and user == self.usr:
                    user.set_email(email)
                else:
                    raise TypeError('Invalid User type')
            else:
                raise TypeError('Invalid role type')
#+END_SRC


**** search_users
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def search_users(self,**kwargs):
        search = []
        for key,value in kwargs.iteritems():
            if key == 'name':
                c = 0
                for user in User.users:
                    if user.name.value == value:
                        search.append(user)
                        c = 1
                if c == 0:
                    raise ConstrainError('Name not found')
            
            if key == 'email':
                c = 0
                for user in User.users:
                    if user.email.value == value:
                        search.append(user)
                        c = 1
                        break
                if c == 0:
                    raise ConstrainError('Email not found')
            
            if key == 'role':
                c = 0
                for user in User.users:
                    if user.email.value == value:
                        search.append(user)
                        c = 1
                        break
                if c == 0:
                    raise ConstrainError('role not found')
        return search
#+END_SRC

**** search_users
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def show_users(self):
        return User.get_all()
#+END_SRC



* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC




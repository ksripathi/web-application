#+TITLE: Data Model of the User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
# -*- coding: utf-8 -*-

from collections import OrderedDict

from flask.ext.sqlalchemy import SQLAlchemy
from flask import current_app, request
from sqlalchemy.orm import relationship
import sqlalchemy.types as types

import os
import re
from urlparse import urlparse
from datetime import datetime
import json

from op_exceptions import AttributeRequired
from op_exceptions import NotAuthorizedError
from op_exceptions import ConstraintError
from utils import *


db = SQLAlchemy()


# Abstract class to hold common methods
class Entity(db.Model):

    __abstract__ = True

    # save a db.Model to the database. commit it.
    def save(self):
        db.session.add(self)
        db.session.commit()

    # update the object, and commit to the database
    def update(self, **kwargs):
        for attr, val in kwargs.iteritems():
            setter_method = "set_" + attr
            try:
                self.__getattribute__(setter_method)(val)
            except Exception as e:
                raise e

        self.save()

    #print "Setting new val"
    #print "Calling %s on %s" % (method_to_set, curr_entity)
    #try:
    #    getattr(record, method_to_set)(new_val)
    #except Exception as e:
    #pass

    def delete(self):
        db.session.delete(self)
        db.session.commit()

#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired
from src.op_exceptions import NotAuthorizedError
from src.op_exceptions import ConstraintError

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC



** Imports for utility functions
   
#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

from flask import make_response, current_app

import re


#+END_SRC


* Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



*** Other function for REST

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')

    return make_response(json.dumps(data), 200,
                         {'content-type': 'application/json'})


# take in a flask request object and try to parse out a dictionary from the
# request
# try to find if request is as JSON first, then look into forms, finally force
# find it.
# If not found return a dict; else return the parsed data
def parse_request(request):
    if request.json:
        # print 'found in request.json'
        data = request.get_json()

    elif request.data:
        # print 'found in request.data'
        data = json.loads(request.data)

    elif request.form:
        # print 'found in request.form'
        data = request.form.to_dict()
        # try to detect if form contains integers and boolean data and attempt
        # to convert them
        # FIXME: is this a good idea? Fix this to do it in a better way?
        for k in data:
            if is_number(data[k]):
                data[k] = int(data[k])
            if is_bool_in_str(data[k]):
                data[k] = str_to_bool(data[k])

            # print k, data[k]

    else:
        data = request.get_json(force=True)

    if not data:
        return False

    return data


# check if a given string is a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


# check if in a given string python bool types are represented
def is_bool_in_str(s):
    if s == "True" or s == "False":
        return True
    return False


# convert python bool types in string to native bool types
def str_to_bool(s):
    if s == "True":
        return True
    if s == "False":
        return False
    return None
#+END_SRC


* Object Relational Model
  
** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Name(Entity):
    __tablename__ = 'Name'

    id = db.Column(db.Integer, primary_key=True)
    value = db.Column(db.String(128), unique=False, nullable=False)
    users = db.relationship('User', backref='name')

    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
        
    def to_client(self):
        return {'name':self.value}

    @staticmethod
    def get_by_id(id):
        return Name.query.get(id)
    @staticmethod
    def get_all_names():
        return Name.query.all()
        

#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def test_name_type(self):
        print "test_name_type"
        system = setUp()
        self.assertEqual(Name.query.get(1).value, "shashank")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
        tearDown(system)
    
    def test_name_get_by_id(self):
        print "test_name_get_by_id"
        system = setUp()
        self.assertEquals(Name.get_by_id(1).value, "shashank")
        tearDown(system)
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Email(Entity):
    __tablename__ = 'Email'

    id = db.Column(db.Integer, primary_key=True)
    value = db.Column(db.String(128), unique=True, nullable=False)
    users = db.relationship('User', uselist = False, backref='email')

    def __init__(self, value):
        if is_email(value):
            self.value = value
        else:
            raise TypeError('%s is not a valid Email!' %value)
            
    def __str__(self):
        return self.value
        
    def to_client(self):
        return {'email' : self.value}

    @staticmethod
    def get_by_id(id):
        return Email.query.get(id)

    @staticmethod
    def get_all_emails():
        return Email.query.all()
#+END_SRC



*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def test_email_type(self):
        print "test_email_type"
        system = setUp()
        
        # correct email
        self.assertEqual(Email.query.get(1).value, "shashank@gmail.com")
        # incorrect email
        #self.assertRaises(TypeError,Email,"John")
        tearDown(system)
#+END_SRC



** User

*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class User(Entity):

    __tablename__ = 'User'

    id = db.Column(db.Integer, primary_key=True)
    role_id = db.Column(db.Integer, db.ForeignKey('Role.id'))
    name_id = db.Column(db.Integer, db.ForeignKey('Name.id'))
    email_id = db.Column(db.Integer, db.ForeignKey('Email.id'))

#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=<object of Role>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self,name,email,role):
        
            self.set_email(email)
            self.set_name(name)
            self.set_role(role)
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestUser(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    TESTING = True

    def test_user_creation(self):
        print "test_user_creation"
        system = setUp()
        # correct email
        self.assertEqual(User.query.get(1).email.value, "shashank@gmail.com")
        self.assertEqual(User.query.get(1).name.value, "shashank")
        self.assertEqual(User.query.get(1).role.value, "admin")       
        tearDown(system)
 #+END_SRC

 
*** Functions

**** setEmail
***** Implementaion
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_email(self, email):
        if isinstance(email,Email):
            self.email = email
            
        else:
            raise TypeError('Invalid object type for email')
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_email(self):
        print "test_set_email"
        system = setUp()
        us = User.get_by_id(1)
        em = Email('shashankviswanadha@gmail.com')
        us.set_email(em)
        us.save()
        em.save()
        self.assertEqual(Email.get_by_id(2).value,'shashankviswanadha@gmail.com')
        tearDown(system)
#+END_SRC


**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_name(self, name):
        if isinstance(name,Name):
            self.name = name
            
        else:
            raise TypeError('Invalid object type for name')
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_name(self):
        print "test_set_name"
        system = setUp()
        us = User.get_by_id(1)
        na = Name('shashankviswanadha')
        us.set_name(na)
        us.save()
        na.save()
        self.assertEqual(Name.get_by_id(2).value,'shashankviswanadha')
        tearDown(system)
#+END_SRC
**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, role):
        if isinstance(role,Role):
            self.role = role
        else:
            raise TypeError('Invalid object type for role')

#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_role(self):
        print "test_set_name"
        system = setUp()
        us = User.get_by_id(1)
        us.set_role(Role.get_by_id(2))
        us.save()
        self.assertEqual(User.get_by_id(1).role.value,'user')
        tearDown(system)
#+END_SRC
**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_role(self):
        return self.role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_role(self):
        print "test_get_role"
        system = setUp()
        us = User.get_by_id(1)
        self.assertEqual(us.get_role().value,'admin')
        tearDown(system)
#+END_SRC

**** getEmail
*****  Implemetation
 #+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_email(self):
        print "test_get_email"
        system = setUp()
        us = User.get_by_id(1)
        self.assertEqual(us.get_email().value,'shashank@gmail.com')
        tearDown(system)
#+END_SRC
 
**** getName
*****  Implemetation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_name(self):
        print "test_get_name"
        system = setUp()
        us = User.get_by_id(1)
        self.assertEqual(us.get_name().value,'shashank')
        tearDown(system)
#+END_SRC

**** toClient
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'name': self.name.value,
            'email': self.email.value,
            'role': self.role.value
        }
#+END_SRC


**** getById : id --> User

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return User.query.get(id)
#+END_SRC
        


**** toClient
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name.value,
            'email': self.email.value,
            'role': self.role.value
        }
#+END_SRC


**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all():
        return User.query.all()
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"
        system = setUp()
        users = User.get_all()
        boo = users[0].name.value == 'shashank'
        self.assertTrue(boo)
        tearDown(system)
#+END_SRC




** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Owner  :: An owner is user an admin who cannot delete himself
   - Admin :: An admin is an user who can add, modify and delete other users
        except owner
   - User :: A User is a user who can view all other users and either modify or
        delete himself.
   - Guest :: A Guest is a user who can view all other users


*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Role(Entity):
    __tablename__ = 'Role'

    id = db.Column(db.Integer, primary_key=True)
    value = db.Column(db.String(128), unique=False, nullable=False)
    users = db.relationship('User', backref='role')
    roles = ['admin','user']

#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, value):
        self.set_role(value)
#+END_SRC


*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestRole(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def test_role_creation(self):
        print "test_role_construtor"
        system = setUp()
        # correct name
        self.assertEqual(Role.get_by_id(1).value, "admin")
        self.assertEqual(Role.get_by_id(2).value, "user")
        # incorrect name
        #self.assertRaises(TypeError, Name, "123dasd")
        tearDown(system)
#+END_SRC

*** Functions
    
**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, name):
        if name not in Role.roles:
            raise TypeError("Invalid role type")
        else:
            self.value = name
#+END_SRC

****** Test_set_role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
#+END_SRC


**** getAllRoles

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all_roles():
        return Role.query.all()

#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all" 
        system = setUp()
        boo = Role.get_all_roles() == [Role.get_by_id(1),Role.get_by_id(2)]
        self.assertTrue(boo)
        tearDown(system)
        

 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {'role' :self.value}

#+END_SRC

**** get_by_id
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return Role.query.get(id)

#+END_SRC



** Session

*** Introduction
   A session is the class that performs all the operations on the system.

   - User :: A User object is associated with each session object.


*** Mutable Data

     These are the data associated with Session type, which are mutable



*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Session():
    
    usr = None
    
#+END_SRC


*** Constructor

    The signature of Session is defined as follows
    #+BEGIN_EXAMPLE
    session = Session(user)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self,user):
        self.usr = user
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

#+END_SRC


*** Functions

**** get_user
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user(self):
        return self.usr
#+END_SRC

**** set_user
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_user(self,user):
        if isinstance(user,User) or user == None:
            self.usr = user
        else:
            raise TypeError('Invalid User type')
#+END_SRC

** WebSystem

*** Introduction
   A WebSystem is the class that performs all the operations on the system.

   - User :: A User object is associated with each session object.


*** Mutable Data

     These are the data associated with WebSystem type, which are mutable



*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class WebSystem():
    
    users = []
    sessions = []
    system_active = False

#+END_SRC


*** Constructor

    The signature of WebSystem is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(user)
   #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self):
        if WebSystem.system_active == False:
            WebSystem.system_active = True
	    #self.users = User.get_all()
        else:
            self.users = User.get_all()
            
        
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class WebSystem_test(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def test_WebSystem_cretion(self):
        print 'WebSystem creation test'
        system = setUp()
        self.assertEqual(system.users[0].email.value,'shashank@gmail.com')
        system = tearDown(system)
    
         
#+END_SRC


*** Functions

**** admin_check
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def admin_check(self,user):
        for us in self.users:
            if us != user:
                if us.role == Role.get_by_id(1):
                    return True
        return False
#+END_SRC


**** login
#+BEGIN_SRC python :tangle ../../src/db.py :eval no

    def login(self,user):
        if isinstance(user,User) and user in self.users:
            flag = 0
            for sess in self.sessions:
                if sess.get_user() == user:
                    flag = 1
                    break
            if flag == 0:
                sess = Session (user)
                self.sessions.append(sess)
                return sess 
            else:
                raise ConstraintError("User already in session")
        else:
            raise TypeError('Invalid user')

#+END_SRC

****  test_login

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

    def test_login(self):
        print 'login test'
        system = setUp()
        us = system.get_user_from_email('shashank@gmail.com')
        sess = system.login(us)
        self.assertEquals(system.sessions,[sess])
        self.assertRaises(ConstraintError,system.login ,system.get_user_from_email('shashank@gmail.com'))
        user = User(Name('sjhdsjsh'),Email('dhfdjh@djhdj.com'),Role.get_by_id(2))
        self.assertRaises(TypeError,system.login,user)
        system.logout(sess)
        tearDown(system)
                      
#+END_SRC


**** logout
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def logout(self,session):
        if isinstance(session,Session):
            session.set_user(None)
            self.sessions.remove(session)
        else:
            raise TypeError('Invalid Session type')
#+END_SRC

****  test_logout

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

    def test_logout(self):
        print 'logout test'
        system = setUp()
        us = system.get_user_from_email('shashank@gmail.com')
        sess = system.login(us)
        before = len(system.sessions)
        system.logout(sess)
        after = len(system.sessions)
        boo = after == before
        self.assertFalse(boo)
        tearDown(system)
        
               
#+END_SRC

**** create_user
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def create_user(self,session,name,email,role):
        if session.usr.role.value == 'admin':
            for user in self.users:
                if user.email.value == email:
                    raise ConstraintError('User alredy exists!')
	    na = Name(name)
	    em = Email(email)
  	    na.save()
	    em.save()
            newUser = User(na,em,role)
	    newUser.save()
	    self.users = User.get_all()
            return True
        else:
            raise NotAuthorizedError('Only an admin can create a new user')
#+END_SRC

****  test_create_user

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_create_user(self):
        print 'create user test'
        system = setUp()
        us = system.get_user_from_email('shashank@gmail.com')
        sess = system.login(us)
        system.create_user(sess,'srivalya','srivalya@gmail.com',Role.get_by_id(2))
        boo = len(system.users) == 2
        self.assertTrue(boo)
        sess1 = system.login(system.get_user_from_email('srivalya@gmail.com'))
        self.assertRaises(NotAuthorizedError,system.create_user,sess1,'mike','mike@hsbs.com',Role.get_by_id(1))
        self.assertRaises(ConstraintError,system.create_user,sess,'mike','srivalya@gmail.com',Role.get_by_id(1))
        system.logout(sess)
        system.logout(sess1)
        tearDown(system)
        
        
#+END_SRC

**** delete_user
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def delete_user(self,session,user):
        if session.usr.role.value == 'admin':
            if isinstance (user,User) and user in self.users:
                for sess in self.sessions:
                    if sess.usr == user:
                        raise NotAuthorizedError('user in session') 
		na = user.name.value
		em = user.email.value            
                user.delete()
		Email.query.filter_by (value = em).delete
		del_name = Name.query.filter_by (value = na)
		if del_name == []:
		    del_name.delete()
		self.users = User.get_all()
                return True
            else:
                raise TypeError('Invalid user')
        else:
            raise NotAuthorizedError('You do not have he permission to delete users' )
#+END_SRC

**** test_delete_user

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_delete_user(self):
        print 'delete user test'
        system = setUp()
        us = system.get_user_from_email('shashank@gmail.com')
        sess = system.login(us) 
        system.create_user(sess,'srivalya','srivalya@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'messi','messi@gmail.com',Role.get_by_id(1))
        system.create_user(sess,'neymar','ney@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        sess1 = system.login(system.get_user_from_email('srivalya@gmail.com'))
        system.delete_user(sess,system.get_user_from_email('ney@gmail.com'))
        boo = len(system.users) == 4
        self.assertTrue(boo)
        self.assertRaises(NotAuthorizedError,system.delete_user,sess,system.get_user_from_email('srivalya@gmail.com'))
        self.assertRaises(NotAuthorizedError,system.delete_user,sess1,system.get_user_from_email('barca@barca.com'))
        system.delete_user(sess,system.get_user_from_email('messi@gmail.com'))
        self.assertTrue(len(system.users) == 3)
        system.logout(sess)
        system.logout(sess1)
        tearDown(system)
        
#+END_SRC

**** update_role
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def update_role(self,session,user):
        if session.usr.role == Role.get_by_id(1):
            if isinstance (user,User) and user in self.users:
                if user.role == Role.get_by_id(2):
                    user.set_role(Role.get_by_id(1))
                    user.save()
                    self.users = User.get_all()
                    return user
                elif user.role == Role.get_by_id(1): 
                    if user == session.usr and self.admin_check(user) == True:
                        user.set_role(Role.get_by_id(2))
                        user.save()
                        self.users = User.get_all()
                        return user
                    else:
                        raise NotAuthorizedError('Operation not authorized')
                
            else:
                raise TypeError('Invalid User type')
        else:
            raise  NotAuthorizedError('Operation not authorized')

#+END_SRC

****  test_update_role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

    def test_update_role(self):
        print 'test update role'
        system = setUp()
        us = system.get_user_from_email('shashank@gmail.com')
        sess = system.login(us)
        system.create_user(sess,'srivalya','srivalya@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        sess1 = system.login(system.get_user_from_email('srivalya@gmail.com'))
        system.update_role(sess,system.get_user_from_email('srivalya@gmail.com'))
        self.assertTrue(system.get_user_from_email('srivalya@gmail.com').role == Role.get_by_id(1))
        sess2 = system.login(system.get_user_from_email('barca@barca.com'))
        self.assertRaises(NotAuthorizedError,system.update_role,sess,system.get_user_from_email('srivalya@gmail.com'))
        self.assertRaises(NotAuthorizedError,system.update_role,sess2,system.get_user_from_email('barca@barca.com'))
        system.update_role(sess1,system.get_user_from_email('srivalya@gmail.com'))
        self.assertTrue(system.get_user_from_email('srivalya@gmail.com').role == Role.get_by_id(2))
        system.logout(sess)
        system.logout(sess1)
        system.logout(sess2)
        tearDown(system)
        
#+END_SRC

**** update name
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def update_name(self,session,user,name):
        if session.usr.role.value == 'admin' :
            if isinstance (user,User) and user in self.users :
                old_name = user.name
                na = Name(name)
                na.save()
                user.set_name(na)
                user.save()
                if old_name.users == []:
                    old_name.delete()
                self.users = User.get_all()
                return user
            else:
                raise TypeError('Invalid Email Type')
        elif session.usr.role.value == 'user' :
            if isinstance (user,User) and user in self.users and user == session.usr:
                old_name = user.name
                na = Name(name)
                na.save()
                user.set_name(na)
                if old_name.users == []:
                   old_name.delete()
                self.users = User.get_all()
                return user
            else:
                raise NotAuthorizedError('Only an admin can change the names of other users')
        else:
            raise TypeError('Invalid role type')
#+END_SRC

****  test_update_name

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_name(self):
        print 'update name test'
        system = setUp()
        sess = system.login(system.get_user_from_email('shashank@gmail.com'))
        system.create_user(sess,'srivalya','srivalya@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        system.create_user(sess,'srivalya','sri@mail.com',Role.get_by_id(2))
        system.update_name(sess,system.get_user_from_email('srivalya@gmail.com'),'sri')
        self.assertTrue(system.get_user_from_email('srivalya@gmail.com').name.value == 'sri')
        sess1 = system.login(system.get_user_from_email('barca@barca.com'))
        self.assertRaises(NotAuthorizedError,system.update_name,sess1,system.get_user_from_email('shashank@gmail.com'),'SV')
        system.update_name(sess1,system.get_user_from_email('barca@barca.com'),'barcelona')
        self.assertTrue(system.get_user_from_email('barca@barca.com').name.value == 'barcelona')
        system.logout(sess)
        system.logout(sess1)
        tearDown(system)
        
#+END_SRC

**** update_email
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def update_email(self,session,user,email):
            if session.usr.role == Role.get_by_id(1) :
                if isinstance (user,User) and user in self.users :
                    em = Email(email)
                    em.save()
                    user.set_email(em)
                    user.save()
                    self.users = User.get_all()
                    return user
                else:
                    raise TypeError('Invalid User type')          
            elif session.usr.role == Role.get_by_id(2) :
                if isinstance (user,User) and user in self.users and user == session.usr:
                    em = Email(email)
                    em.save()
                    user.set_email(em)
                    user.save()
                    self.users = User.get_all()
                    return user
                else:
                    raise NotAuthorizedError('Only an admin can change the names of other users')
            else:
                raise TypeError('Invalid role type')
#+END_SRC

****  test_update_email
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_email(self):
        print 'test update email'
        system = setUp()
        sess = system.login(system.get_user_from_email('shashank@gmail.com'))
        system.create_user(sess,'srivalya','srivalya@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        system.update_email(sess,system.get_user_from_email('srivalya@gmail.com'),'srivalya12@gmail.com')
        self.assertTrue(system.get_user_from_email('srivalya12@gmail.com').email.value == 'srivalya12@gmail.com')
        sess1 = system.login(system.get_user_from_email('barca@barca.com'))
        self.assertRaises(NotAuthorizedError,system.update_email,sess1,system.get_user_from_email('shashank@gmail.com'),'shashankviswanadha@gmail.com')
        system.update_email(sess1,system.get_user_from_email('barca@barca.com'),'barcelona@barca.com')
        self.assertTrue(system.get_user_from_email('barcelona@barca.com').email.value == 'barcelona@barca.com')
        system.logout(sess)
        system.logout(sess1)
        tearDown(system)

#+END_SRC

**** search_users
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def search_users(self,session,**kwargs):
        if session in self.sessions:
            search = []
            for key,value in kwargs.iteritems():
                if key == 'name':
                    c = 0
                    for user in self.users:
                        if user.name.value == value:
                            search.append(user)
                            c = 1
                    if c == 0:
                        raise ConstraintError('Name not found')
                
                if key == 'email':
                    c = 0
                    for user in self.users:
                        if user.email.value == value:
                            search.append(user)
                            c = 1
                            break
                    if c == 0:
                        raise ConstraintError('Email not found')
                
                if key == 'role':
                    c = 0
                    for user in self.users:
                        if user.role.value == value:
                            search.append(user)
                            c = 1
                    if c == 0:
                        raise ConstraintError('role not found')
            if search == []:
                return False
            return search
        raise ConstraintError('Session not found')
#+END_SRC

****  test_search_users
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_search_users(self):
        print 'test search users'
        system = setUp()
        sess = system.login(system.get_user_from_email('shashank@gmail.com'))
        system.create_user(sess,'messi','messi@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        system.create_user(sess,'messi','lm@gmail.com',Role.get_by_id(1))
        sch1 = system.search_users(sess,name = 'messi')
        self.assertTrue(sch1 == [system.users[1],system.users[3]])
        sch2 = system.search_users(sess,email = 'shashank@gmail.com')
        self.assertTrue(sch2 == [system.users[0]])
        sch3 = system.search_users(sess,role = 'user')
        self.assertTrue(sch3 == [system.users[1],system.users[2]])
        system.logout(sess)
        tearDown(system)
        

#+END_SRC
**** get_users
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_users(self,session):
        if isinstance(session,Session) and session in self.sessions:
            self.users = User.get_all()
            return self.users
        else:
            raise TypeError('Invalid session')
#+END_SRC

****  test_get_users
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

    def test_get_users(self):
        print 'test_get_ users'
        system = setUp()
        sess = system.login(system.get_user_from_email('shashank@gmail.com'))
        system.create_user(sess,'messi','messi@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        self.assertTrue(len(system.get_users(sess)) == 3)
        system.logout(sess)
        tearDown(system)

#+END_SRC

**** get_roles
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_roles(self,session):
        if isinstance(session,Session) and session in self.sessions:
            return Role.get_all_roles()
        else:
            raise TypeError('Invalid session')
#+END_SRC

**** get_names
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_names(self,session):
        if isinstance(session,Session) and session in self.sessions:
            return Name.get_all_names()
        else:
            raise TypeError('Invalid session')
#+END_SRC

**** get_emails
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_emails(self,session):
        if isinstance(session,Session) and session in self.sessions:
            return Email.get_all_emails()
        else:
            raise TypeError('Invalid session')
#+END_SRC

**** get_sessions
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_sessions(self):
        return self.sessions
#+END_SRC

****  test_get_sessions
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no

    def test_get_sessions(self):
        print 'test get sessions'
        system = setUp()
        sess = system.login(system.get_user_from_email('shashank@gmail.com'))
        system.create_user(sess,'messi','messi@gmail.com',Role.get_by_id(2))
        system.create_user(sess,'barca','barca@barca.com',Role.get_by_id(2))
        sess1 = system.login(system.get_user_from_email('messi@gmail.com'))
        sess2 = system.login(system.get_user_from_email('barca@barca.com'))
        self.assertTrue(len(system.get_sessions()) == 3) 
        system.logout(sess)
        system.logout(sess1)
        system.logout(sess2)
        tearDown(system)

#+END_SRC
        
**** get_user_from_email
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user_from_email(self,email):
        for user in self.users:
            if user.get_email().value == email:
                return user
        return False
#+END_SRC

**** get_session_from_user
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_session_from_user(self,user):
        if isinstance(user,User):
            for sess in self.sessions:
                if sess.usr == user:
                    return sess
            raise ConstraintError("User not in session")
        else:
            raise TypeError('Not a valid user')
#+END_SRC

**** get_session_from_email
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_session_from_email(self,email):
        self.users = User.get_all()
        us = self.get_user_from_email(email)
        if us != False:
            return self.get_session_from_user(us)
        raise ConstraintError("User not in system")
#+END_SRC

**** get_name
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user_name(self,session,user):
        if session in self.sessions:
            if isinstance(user,User):
                return user.get_name()
            else:
                raise TypeError('Invalid user')
        raise TypeError('Invalid session')
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_user_name(self):
        print "test_get_user_name"
        system = setUp()
        us = User.get_by_id(1)
        sess = system.login(us)
        self.assertEquals(system.get_user_name(sess,us).value, 'shashank')
        system.logout(sess)
        tearDown(system)
#+END_SRC

**** get_email
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user_email(self,session,user):
        if session in self.sessions:
            if isinstance(user,User):
                return user.get_email()
            else:
                raise TypeError('Invalid user')
        raise TypeError('Invalid session')
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_user_email(self):
        print "test_get_user_email"
        system = setUp()
        us = User.get_by_id(1)
        sess = system.login(us)
        self.assertEquals(system.get_user_email(sess,us).value, 'shashank@gmail.com')
        system.logout(sess)
        tearDown(system)
#+END_SRC

**** get_role
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user_role(self,session,user):
        if session in self.sessions:
            if isinstance(user,User):
                return user.get_role()
            else:
                raise TypeError('Invalid user')
        raise TypeError('Invalid session')
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_user_role(self):
        print "test_get_user_role"
        system = setUp()
        us = User.get_by_id(1)
        sess = system.login(us)
        self.assertEquals(system.get_user_role(sess,us), Role.get_by_id(1))
        system.logout(sess)
        tearDown(system)
#+END_SRC

        

**** get_name_by_id
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name_by_id(self,session,ide):
        if session in self.sessions:
            return Name.get_by_id(ide)
        raise TypeError('Invalid session')
#+END_SRC
**** get_email_by_id
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_email_by_id(self,session,ide):
        if session in self.sessions:
            return Email.get_by_id(ide)
        raise TypeError('Invalid session')
#+END_SRC
**** get_role_by_id
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_role_by_id(self,session,ide):
        if session in self.sessions:
            return Role.get_by_id(ide)
        raise TypeError('Invalid session')
#+END_SRC
**** get_user_by_id
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_user_by_id(self,session,ide):
        if session in self.sessions:
            return User.get_by_id(ide)
        raise TypeError('Invalid session')
#+END_SRC

**  setUp and tearDown

#+BEGIN_SRC python :tangle ../../src/db.py :eval no

def setUp():
    db.create_all()
    role_admin = Role('admin')
    role_user = Role('user')
    role_admin.save()
    role_user.save()
    na = Name('shashank')
    em = Email('shashank@gmail.com')
    na.save()
    em.save()
    us = User(na,em,Role.get_by_id(1))
    us.save()
    system = WebSystem()
    system.users = User.get_all()
    return system

def tearDown(system):
    db.session.remove()
    db.drop_all()
    system.users = []
    system.sessions = []
    WebSystem.system_active = False
    return system
    
#+END_SRC




* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



